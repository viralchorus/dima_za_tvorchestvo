# app.py ‚Äî –î–∏–º–∞ –ó–∞ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è v)
import streamlit as st
import pandas as pd
import os
from datetime import datetime

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
st.set_page_config(page_title="–î–∏–º–∞ –ó–∞ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", page_icon="üé®", layout="centered")
CSV_FILE = "dima_za_tvorchestvo.csv"
EXPECTED_COLS = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ë–∞–ª–ª—ã", "–†–µ—Ü–µ–Ω–∑–∏—è", "–û—Ü–µ–Ω—â–∏–∫", "–î–∞—Ç–∞"]

# -----------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------
def ensure_columns(df, cols):
    for c in cols:
        if c not in df.columns:
            df[c] = ""
    # –≤–µ—Ä–Ω—É—Ç—å df —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∫–æ–ª–æ–Ω–æ–∫
    return df[[c for c in cols if c in df.columns]]

def flomaster_score(R, S, T, H, V):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ –§–ª–æ–º–∞—Å—Ç–µ—Ä–∞ (–æ–∫—Ä—É–≥–ª—ë–Ω–Ω–æ–µ —Ü–µ–ª–æ–µ)."""
    B = R + S + T + H
    B_prime = B * 1.4
    M = 1.0 + ((V - 1) / 9) * (1.6072 - 1.0)
    return int(round(B_prime * M))

# -----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ CSV (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Å—Ç–∞—Ä—ã–º/–ø—É—Å—Ç—ã–º —Ñ–∞–π–ª–∞–º)
# -----------------------------
if os.path.exists(CSV_FILE) and os.path.getsize(CSV_FILE) > 0:
    try:
        df_all = pd.read_csv(CSV_FILE)
    except Exception:
        df_all = pd.DataFrame(columns=EXPECTED_COLS)
else:
    df_all = pd.DataFrame(columns=EXPECTED_COLS)

# –¥–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –ø—Ä–∏–≤–µ–¥—ë–º –ø–æ—Ä—è–¥–æ–∫
df_all = ensure_columns(df_all, EXPECTED_COLS)

# -----------------------------
# –ó–∞–≥–æ–ª–æ–≤–æ–∫
# -----------------------------
st.title("üé® –î–∏–º–∞ –ó–∞ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ")
st.write("–û—Ü–µ–Ω–∏–≤–∞–π —Ç—Ä–µ–∫–∏, –∞–ª—å–±–æ–º—ã –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ —Å–∏—Å—Ç–µ–º–µ ‚Äî –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ —Å –≤–∞–π–±–æ–º. (–ö–≤–∞—Å –ß–∞—Ä—Ç ‚Äî —ç—Ç–æ —Ç–æ–ø —Ç—Ä–µ–∫–æ–≤.)")

# -----------------------------
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
# -----------------------------
category = st.radio("–ß—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º?", ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"], horizontal=True)
# –ø–∞–¥–µ–∂–∏/–Ω–∞–∑–≤–∞–Ω–∏—è
forms = {
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": {"who": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "title": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"},
    "–¢—Ä–µ–∫": {"who": "—Ç—Ä–µ–∫–∞", "title": "–¢—Ä–µ–∫–∏"},
    "–ê–ª—å–±–æ–º": {"who": "–∞–ª—å–±–æ–º–∞", "title": "–ê–ª—å–±–æ–º—ã"},
}[category]

# –∞—Ä—Ç–∏—Å—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –¢—Ä–µ–∫/–ê–ª—å–±–æ–º)
artist = ""
if category in ["–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"]:
    artist = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")

# –Ω–∞–∑–≤–∞–Ω–∏–µ (—Ç—Ä–µ–∫/–∞–ª—å–±–æ–º/–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
name = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {forms['who']}:")

# -----------------------------
# –°–ª–∞–π–¥–µ—Ä—ã (–æ—Ü–µ–Ω–∫–∏)
# -----------------------------
R = st.slider("üé≠ –†–∏—Ñ–º—ã / –û–±—Ä–∞–∑—ã", 1, 10, 5)
S = st.slider("üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ / –†–∏—Ç–º–∏–∫–∞", 1, 10, 5)
T = st.slider("üî• –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è", 1, 10, 5)
H = st.slider("üí´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å / –•–∞—Ä–∏–∑–º–∞", 1, 10, 5)

st.markdown("### üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±")
st.markdown(
    """
    <div style='padding:8px; border:2px solid #6C63FF; border-radius:10px; background-color:#F3F0FF; color:#000;'>
        <b>–ß–µ–º —Å–∏–ª—å–Ω–µ–µ –≤–∞–π–± ‚Äî —Ç–µ–º –≤–∫—É—Å–Ω–µ–µ –∫–≤–∞—Å. –≠—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –≤–ª–∏—è–µ—Ç –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏.</b>
    </div>
    """,
    unsafe_allow_html=True,
)
V = st.slider("üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±", 1, 10, 5)

# -----------------------------
# –ù–∏–∫–Ω–µ–π–º –æ—Ü–µ–Ω—â–∏–∫–∞ –∏ —Ä–µ—Ü–µ–Ω–∑–∏—è
# -----------------------------
st.markdown("### üß† –û—Ü–µ–Ω—â–∏–∫ –∏ —Ä–µ—Ü–µ–Ω–∑–∏—è")
reviewer = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")
review_text = st.text_area("‚úçÔ∏è –¢–≤–æ—è —Ä–µ—Ü–µ–Ω–∑–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", "")

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
# -----------------------------
if st.button("–ò —á—ë —É –Ω–∞—Å –≤ –∏—Ç–æ–≥–µ?"):
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not name.strip():
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏.")
    elif category in ["–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"] and not artist.strip():
        st.warning("‚ö†Ô∏è –£–∫–∞–∂–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ç—Ä–µ–∫–∞/–∞–ª—å–±–æ–º–∞.")
    else:
        score = flomaster_score(R, S, T, H, V)
        reviewer_final = reviewer.strip() if reviewer.strip() else "–°–µ—Ä–∞—è –º—ã—à—å (–ù–µ –∑–∞—Ä–µ–≥–∞–Ω)"
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        new_row = {
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
        "–ù–∞–∑–≤–∞–Ω–∏–µ": name.strip(),
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": artist.strip() if category in ["–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"] else "",
            "–ë–∞–ª–ª—ã": score,
            "–†–µ—Ü–µ–Ω–∑–∏—è": review_text.strip(),
            "–û—Ü–µ–Ω—â–∏–∫": reviewer_final,
            "–î–∞—Ç–∞": now
        }
        # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º CSV (utf-8-sig –¥–ª—è Excel)
        df_all = pd.concat([df_all, pd.DataFrame([new_row])], ignore_index=True)
        df_all = ensure_columns(df_all, EXPECTED_COLS)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        df_all.to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
        st.success(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {score} / 90")
        st.balloons()

# -----------------------------
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ö–≤–∞—Å –ß–∞—Ä—Ç–∞ (—Ç–æ–ø –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
# -----------------------------
st.markdown("---")
st.subheader(f"üèÜ –ö–≤–∞—Å –ß–∞—Ä—Ç: {forms['title']}")

# –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º
category_df = df_all[df_all["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category].copy()
if not category_df.empty:
    category_df["–ë–∞–ª–ª—ã"] = pd.to_numeric(category_df["–ë–∞–ª–ª—ã"], errors="coerce").fillna(0).astype(int)
    sorted_df = category_df.sort_values(by="–ë–∞–ª–ª—ã", ascending=False).reset_index(drop=True)
    sorted_df.index += 1
    for idx, row in sorted_df.iterrows():
        artist_part = f" ‚Äî {row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']}" if str(row.get("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "")).strip() else ""
        st.markdown(f"{idx}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}{artist_part} ‚Äî üéØ {int(row['–ë–∞–ª–ª—ã'])} / 90")
        if str(row.get("–†–µ—Ü–µ–Ω–∑–∏—è", "")).strip():
            with st.expander(f"–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é ({row.get('–û—Ü–µ–Ω—â–∏–∫','')})"):
                st.write(row["–†–µ—Ü–µ–Ω–∑–∏—è"])
                st.caption(f"–î–∞—Ç–∞: {row.get('–î–∞—Ç–∞','')}")
        else:
            st.caption(f"–û—Ü–µ–Ω–∏–ª: {row.get('–û—Ü–µ–Ω—â–∏–∫','')}")
else:
    st.info(f"üëÄ –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {forms['title'].lower()}.")

# -----------------------------
# –ù–µ–≤–∏–¥–∏–º–∞—è/–Ω–µ–≤–∑—Ä–∞—á–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–≤–Ω–∏–∑—É)
# -----------------------------
st.markdown("---")
admin_code = st.text_input("üîê –ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", type="password", help="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –µ—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω.")

if admin_code == "characterai":
    # –Ω–µ–≤–∑—Ä–∞—á–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    st.markdown(
        """
        <div style='background:#f7f7f7; border:1px solid #e6e6e6; border-radius:8px; padding:10px;'>
        <small style='color:#666;'>üß© –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–Ω–∫–∞—è –∏ –Ω–µ–∑–∞–º–µ—Ç–Ω–∞—è). –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –µ—ë –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é –∏–∑ CSV.</small>
        </div>
        """,
        unsafe_allow_html=True,
    )

    if not df_all.empty:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º reset_index —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        df_with_index = df_all.reset_index()
        for _, r in df_with_index.iterrows():
            orig_idx = int(r["index"])
            with st.expander(f"{r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}: {r['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {r['–ë–∞–ª–ª—ã']} / 90"):
                st.write(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {r['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']}")
                st.write(f"–†–µ—Ü–µ–Ω–∑–∏—è: {r['–†–µ—Ü–µ–Ω–∑–∏—è'] or '_(–ø—É—Å—Ç–æ)_'}")
                st.write(f"–û—Ü–µ–Ω—â–∏–∫: {r['–û—Ü–µ–Ω—â–∏–∫']}")
                st.write(f"–î–∞—Ç–∞: {r.get('–î–∞—Ç–∞','')}")
                if st.button(f"üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #{orig_idx+1}", key=f"del_{orig_idx}"):
                    # —É–¥–∞–ª—è–µ–º –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ‚Äî –±–µ–∑ –≤—ã–∑–æ–≤–∞ rerun
                    df_all = df_all.drop(index=orig_idx).reset_index(drop=True)
                    df_all = ensure_columns(df_all, EXPECTED_COLS)
                    df_all.to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
                    st.success("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ Streamlit —Å–∞–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç —Å–∫—Ä–∏–ø—Ç, –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        
# -----------------------------
# –ù–∏–∂–Ω—è—è –ø–æ–¥–ø–∏—Å—å (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
# -----------------------------
st.markdown(
    """
    <div style='text-align:center; margin-top:40px; color:#999999; font-size:13px;'>
        # –º—ã—à–∏ –≤—Å–µ–≥–¥–∞ –Ω–∏–∂–µ
    </div>
    """,
    unsafe_allow_html=True,
)
