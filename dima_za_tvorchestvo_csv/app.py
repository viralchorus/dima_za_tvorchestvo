import streamlit as st
import pandas as pd
import os
import shutil

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# -----------------------------
CSV_FILE = "ratings.csv"
BACKUP_FILE = "ratings_backup.csv"

# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
# -----------------------------
def flomaster_score(R, S, T, H, V):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ –§–ª–æ–º–∞—Å—Ç–µ—Ä–∞"""
    B = R + S + T + H
    B_prime = B * 1.4
    M = 1.0 + ((V - 1) / 9) * (1.6072 - 1.0)
    return int(round(B_prime * M))

# -----------------------------
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV
# -----------------------------
EXPECTED_COLS = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ë–∞–ª–ª—ã", "–†–µ—Ü–µ–Ω–∑–∏—è", "–û—Ü–µ–Ω—â–∏–∫", "R", "S", "T", "H", "V"]

def ensure_df_columns(df):
    for c in EXPECTED_COLS:
        if c not in df.columns:
            df[c] = ""
    return df[EXPECTED_COLS]

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV
# -----------------------------
if not os.path.exists(CSV_FILE) or os.path.getsize(CSV_FILE) == 0:
    df = pd.DataFrame(columns=EXPECTED_COLS)
    df.to_csv(CSV_FILE, index=False)

# -----------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ CSV
# -----------------------------
try:
    df = pd.read_csv(CSV_FILE)
except Exception:
    df = pd.DataFrame(columns=EXPECTED_COLS)

df = ensure_df_columns(df)

# -----------------------------
# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø–∞–¥–µ–∂–µ–π
# -----------------------------
category_forms = {
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": {"who": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "title": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"},
    "–¢—Ä–µ–∫": {"who": "—Ç—Ä–µ–∫–∞", "title": "–¢—Ä–µ–∫–∏"},
    "–ê–ª—å–±–æ–º": {"who": "–∞–ª—å–±–æ–º–∞", "title": "–ê–ª—å–±–æ–º—ã"},
}

# -----------------------------
# –ó–∞–≥–æ–ª–æ–≤–æ–∫
# -----------------------------
st.title("üé® –î–∏–º–∞ –ó–∞ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ")
st.write("–û—Ü–µ–Ω–∏ –º—É–∑–ª–æ –∫–∞–∫ –î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤. (–¢–æ–ª—å–∫–æ –Ω–µ –Ω–∞–º–æ—á–∏ –ø–∏—Å—é–Ω!)")

# -----------------------------
# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# -----------------------------
category = st.radio(
    "–ß—Ç–æ –≤ —Ä–æ—Ç–∞—Ü–∏–∏ krap'n'kvas —Å–µ–≥–æ–¥–Ω—è?",
    ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"],
    horizontal=True,
)
forms = category_forms[category]

# -----------------------------
# –ü–æ–ª—è –≤–≤–æ–¥–∞
# -----------------------------
name = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {forms['who']}:")
artist = ""
if category in ["–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"]:
    artist = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")

# –∫—Ä–∏—Ç–µ—Ä–∏–∏
R = st.slider("üé≠ –†–∏—Ñ–º—ã / –û–±—Ä–∞–∑—ã", 1, 10, 5)
S = st.slider("üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ / –†–∏—Ç–º–∏–∫–∞", 1, 10, 5)
T = st.slider("üî• –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è", 1, 10, 5)
H = st.slider("üí´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å / –•–∞—Ä–∏–∑–º–∞", 1, 10, 5)

st.markdown("### üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±")
st.markdown(
    """
    <div style='padding:8px; border:2px solid #6C63FF; border-radius:10px; background-color:#F3F0FF; color:#000000;'>
        <b>–ß–µ–º —Å–∏–ª—å–Ω–µ–µ –≤–∞–π–± ‚Äî —Ç–µ–º –≤–∫—É—Å–Ω–µ–µ –∫–≤–∞—Å. –≠—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –≤–ª–∏—è–µ—Ç –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏, –±—Ä–æ!</b>
    </div>
    """,
    unsafe_allow_html=True,
)
V = st.slider("üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±", 1, 10, 5)

# -----------------------------
# –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# -----------------------------
current_score = flomaster_score(R, S, T, H, V)
st.markdown(
    f"""
    <div style='text-align:center; margin-top:14px; margin-bottom:10px;'>
        <span style='font-size:18px; color:#6C63FF;'>
            üîÆ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{current_score} / 90</b>
        </span>
    </div>
    """,
    unsafe_allow_html=True
)

# -----------------------------
# –ü–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------
reviewer = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:")
review_text = st.text_area("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–Ω–∑–∏—é (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")

# -----------------------------
# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
# -----------------------------
if st.button("–ò —á—ë —É –Ω–∞—Å –≤ –∏—Ç–æ–≥–µ?"):
    if name.strip() == "":
        st.warning("‚ö†Ô∏è –¢—ã —á—ë –ß—É–ø–∞? –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π, –Ω–µ –±—É–¥—å –º—ã—à—å—é!")
    else:
        score = flomaster_score(R, S, T, H, V)
        st.success(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è {forms['who']} {name}: {score} / 90 üéØ")
        st.balloons()
        # üçª –í–∫—É—Å–Ω—è—à–∫–∞ ‚Äî –≤–∏–∑—É–∞–ª
        if score == 90:
            st.markdown("""
            <style>
            @keyframes softGlow {
              0% { text-shadow: 0 0 6px #ffd000, 0 0 12px #ffbb00; opacity: 0.6; }
              50% { text-shadow: 0 0 10px #ffe966, 0 0 20px #ffcc33; opacity: 0.9; }
              100% { text-shadow: 0 0 6px #ffd000, 0 0 12px #ffbb00; opacity: 0.6; }
            }
            @keyframes spark {
              0%, 100% { opacity: 0; transform: scale(0.8) translateY(0px); }
              50% { opacity: 0.6; transform: scale(1) translateY(-6px); }
            }
            .vkusnyashka {
              animation: softGlow 3s ease-in-out infinite;
              color: #ffcc33;
              font-weight: bold;
              font-size: 26px;
              text-align: center;
              margin-top: 20px;
              position: relative;
            }
            .spark {
              position: absolute;
              font-size: 14px;
              color: rgba(255,230,128,0.35);
              animation: spark 2.4s ease-in-out infinite;
              opacity: 0.45;
            }
            .spark:nth-child(1) { left: 30%; animation-delay: 0s; }
            .spark:nth-child(2) { left: 50%; animation-delay: 0.6s; }
            .spark:nth-child(3) { left: 70%; animation-delay: 1.2s; }
            </style>

            <div class="vkusnyashka">
                üçª –í–∫—É—Å–Ω—è—à–∫–∞ –æ—Ç –î–º–∏—Ç—Ä–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞!
                <div class="spark">‚ú¶</div>
                <div class="spark">‚ú¶</div>
                <div class="spark">‚ú¶</div>
            </div>
            <p style="text-align:center; color:#777; font-weight:bold;">–û–û–û –ù–ò–•–£–Ø!!</p>
            """, unsafe_allow_html=True)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_row = {
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name.strip(),
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": artist.strip() if isinstance(artist, str) else "",
            "–ë–∞–ª–ª—ã": int(score),
            "–†–µ—Ü–µ–Ω–∑–∏—è": review_text.strip(),
            "–û—Ü–µ–Ω—â–∏–∫": reviewer.strip() if reviewer.strip() else "–°–µ—Ä–∞—è –º—ã—à—å (–ù–µ –∑–∞—Ä–µ–≥–∞–Ω)",
            "R": int(R), "S": int(S), "T": int(T), "H": int(H), "V": int(V)
        }

        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
        df = ensure_df_columns(df)
        df.to_csv(CSV_FILE, index=False)

# -----------------------------
# –ö–≤–∞—Å –ß–∞—Ä—Ç
# -----------------------------
filtered_df = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category].copy()
if not filtered_df.empty:
    st.subheader(f"üèÜ –ö–≤–∞—Å –ß–∞—Ä—Ç: {forms['title']}")
    filtered_df["–ë–∞–ª–ª—ã"] = pd.to_numeric(filtered_df["–ë–∞–ª–ª—ã"], errors="coerce").fillna(0).astype(int)
    filtered_df = filtered_df.sort_values(by="–ë–∞–ª–ª—ã", ascending=False).reset_index(drop=True)
    filtered_df.index += 1

    for i, row in filtered_df.iterrows():
        artist_part = f" ‚Äî {row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']}" if isinstance(row["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"], str) and row["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"].strip() else ""
        st.markdown(f"{i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}{artist_part} ‚Äî {int(row['–ë–∞–ª–ª—ã'])} / 90")

        if isinstance(row["–†–µ—Ü–µ–Ω–∑–∏—è"], str) and row["–†–µ—Ü–µ–Ω–∑–∏—è"].strip():
            with st.expander("üóí –ß–∏—Ç–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é"):
                st.write(row["–†–µ—Ü–µ–Ω–∑–∏—è"])
                st.markdown("---")
                try:
                    st.markdown(
                        f"üé≠ –†–∏—Ñ–º—ã / –û–±—Ä–∞–∑—ã: {int(row['R'])}/10  \n"
                        f"üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ / –†–∏—Ç–º–∏–∫–∞: {int(row['S'])}/10  \n"
                        f"üî• –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è: {int(row['T'])}/10  \n"
                        f"üí´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å / –•–∞—Ä–∏–∑–º–∞: {int(row['H'])}/10  \n"
                        f"üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±: {int(row['V'])}/10"
                    )
                except Exception:
                    st.info("üß© –ü–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

                if int(row["–ë–∞–ª–ª—ã"]) == 90:
                    st.markdown(
                        "<div style='text-align:right; opacity:0.45; color:#ffcc33; font-weight:bold; margin-top:6px;'>üçª –í–∫—É—Å–Ω—è—à–∫–∞</div>",
                        unsafe_allow_html=True
                    )
                st.caption(f"–û—Ü–µ–Ω–∏–ª: {row['–û—Ü–µ–Ω—â–∏–∫']}")
        else:
            st.caption(f"–û—Ü–µ–Ω–∏–ª: {row['–û—Ü–µ–Ω—â–∏–∫']}")
else:
    st.info(f"üëÄ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {forms['title'].lower()}.")

# -----------------------------
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# -----------------------------
st.markdown("---")
admin_code = st.text_input("üîê –ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", type="password")

if admin_code == "characterai":
    st.markdown("### üß© –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    if not df.empty:
        df_admin = df.reset_index().rename(columns={"index": "orig_index"})
        for _, r in df_admin.iterrows():
            orig_idx = int(r["orig_index"])
            with st.expander(f"{r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}: {r['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî {r['–ë–∞–ª–ª—ã']} / 90"):
                new_cat = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"], index=["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å","–¢—Ä–µ–∫","–ê–ª—å–±–æ–º"].index(r["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]), key=f"cat_{orig_idx}")
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=r["–ù–∞–∑–≤–∞–Ω–∏–µ"], key=f"name_{orig_idx}")
                new_artist = st.text_input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", value=r["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"], key=f"artist_{orig_idx}")
                new_review = st.text_area("–†–µ—Ü–µ–Ω–∑–∏—è", value=r["–†–µ—Ü–µ–Ω–∑–∏—è"], key=f"review_{orig_idx}")
                new_reviewer = st.text_input("–û—Ü–µ–Ω—â–∏–∫", value=r["–û—Ü–µ–Ω—â–∏–∫"], key=f"rev_{orig_idx}")

                def safe_int(x): 
                    try: return int(x)
                    except: return 5

                new_R = st.number_input("R", 1, 10, safe_int(r["R"]), key=f"R_{orig_idx}")
                new_S = st.number_input("S", 1, 10, safe_int(r["S"]), key=f"S_{orig_idx}")
                new_T = st.number_input("T", 1, 10, safe_int(r["T"]), key=f"T_{orig_idx}")
                new_H = st.number_input("H", 1, 10, safe_int(r["H"]), key=f"H_{orig_idx}")
                new_V = st.number_input("V", 1, 10, safe_int(r["V"]), key=f"V_{orig_idx}")

                col1, col2 = st.columns(2)
                with col1:
                    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"save_{orig_idx}"):
                        recalculated = flomaster_score(new_R, new_S, new_T, new_H, new_V)
                        df.loc[orig_idx, ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è","–ù–∞–∑–≤–∞–Ω–∏–µ","–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å","–†–µ—Ü–µ–Ω–∑–∏—è","–û—Ü–µ–Ω—â–∏–∫"]] = [new_cat, new_name, new_artist, new_review, new_reviewer]
                        df.loc[orig_idx, ["R","S","T","H","V","–ë–∞–ª–ª—ã"]] = [new_R,new_S,new_T,new_H,new_V,recalculated]
                        df.to_csv(CSV_FILE, index=False)
                        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
                with col2:
                    if st.button("üóë –£–¥–∞–ª–∏—Ç—å", key=f"del_{orig_idx}"):
                        df = df.drop(index=orig_idx)
                        df.to_csv(CSV_FILE, index=False)
                        st.warning("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")

    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# -----------------------------
# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
# -----------------------------
st.markdown("### ü©π –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
if st.button("ü©π –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã—Ö"):
    try:
        if os.path.exists(CSV_FILE):
            shutil.copy(CSV_FILE, BACKUP_FILE)
            st.success(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ({BACKUP_FILE})")

        df_repair = pd.read_csv(CSV_FILE)
        for col in ["R","S","T","H","V"]:
            if col not in df_repair.columns:
                df_repair[col] = 5
        for col in ["R","S","T","H","V"]:
            df_repair[col] = pd.to_numeric(df_repair[col], errors="coerce").fillna(5).astype(int)

        df_repair.to_csv(CSV_FILE, index=False)
        st.success("üé® –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        # -----------------------------
# –ù–∏–∂–Ω—è—è –ø–æ–¥–ø–∏—Å—å
# -----------------------------
st.markdown(
    "<div style='text-align:center; margin-top:60px; color:#999;'># –º—ã—à–∏ –≤—Å–µ–≥–¥–∞ –Ω–∏–∂–µ</div>",
    unsafe_allow_html=True,
)
