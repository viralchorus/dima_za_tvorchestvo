import streamlit as st
import pandas as pd
import os

CSV_FILE = "kvas_chart.csv"

# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
# -----------------------------
def flomaster_score(R, S, T, H, V):
    B = R + S + T + H
    B_prime = B * 1.4
    M = 1.0 + ((V - 1) / 9) * (1.6072 - 1.0)
    return round(B_prime * M)

# -----------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV
# -----------------------------
if not os.path.exists(CSV_FILE):
    pd.DataFrame(columns=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–∞–ª–ª—ã", "–†–µ—Ü–µ–Ω–∑–∏—è"]).to_csv(CSV_FILE, index=False)

try:
    df = pd.read_csv(CSV_FILE)
except pd.errors.EmptyDataError:
    df = pd.DataFrame(columns=["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–∞–ª–ª—ã", "–†–µ—Ü–µ–Ω–∑–∏—è"])

# -----------------------------
# –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–∞–¥–µ–∂–µ–π
# -----------------------------
category_forms = {
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": {"who": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "title": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"},
    "–¢—Ä–µ–∫": {"who": "—Ç—Ä–µ–∫–∞", "title": "–¢—Ä–µ–∫–∏"},
    "–ê–ª—å–±–æ–º": {"who": "–∞–ª—å–±–æ–º–∞", "title": "–ê–ª—å–±–æ–º—ã"},
}

# -----------------------------
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# -----------------------------
st.title("üé® –î–∏–º–∞ –ó–∞ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ")
st.write("–û—Ü–µ–Ω–∏ –º—É–∑–ª–æ –∫–∞–∫ –î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤. (–¢–æ–ª—å–∫–æ –Ω–µ –Ω–∞–º–æ—á–∏ –ø–∏—Å—é–Ω!)")

category = st.radio("–ß—Ç–æ –≤ —Ä–æ—Ç–∞—Ü–∏–∏ krap‚Äôn‚Äôkvas —Å–µ–≥–æ–¥–Ω—è?", ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"], horizontal=True)
forms = category_forms[category]

# –î–ª—è —Ç—Ä–µ–∫–æ–≤ –∏ –∞–ª—å–±–æ–º–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
artist = ""
if category in ["–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"]:
    artist = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:")

name = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {forms['who']}:")

R = st.slider("üé≠ –†–∏—Ñ–º—ã / –û–±—Ä–∞–∑—ã", 1, 10, 5)
S = st.slider("üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ / –†–∏—Ç–º–∏–∫–∞", 1, 10, 5)
T = st.slider("üî• –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è", 1, 10, 5)
H = st.slider("üí´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å / –•–∞—Ä–∏–∑–º–∞", 1, 10, 5)

st.markdown("### üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±")
st.markdown(
    "<div style='padding:8px; border:2px solid #6C63FF; border-radius:10px; background-color:#F3F0FF; color:#000;'>"
    "<b>–ß–µ–º —Å–∏–ª—å–Ω–µ–µ –≤–∞–π–± ‚Äî —Ç–µ–º –≤–∫—É—Å–Ω–µ–µ –∫–≤–∞—Å. –≠—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –≤–ª–∏—è–µ—Ç –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏, –±—Ä–æ!</b>"
    "</div>",
    unsafe_allow_html=True
)
V = st.slider("üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±", 1, 10, 5)

review = st.text_area("üìù –†–µ—Ü–µ–Ω–∑–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", placeholder="–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ –≤–∞–π–±–µ, —Ä–∏—Ñ–º–∞—Ö, —Å—Ç—Ä—É–∫—Ç—É—Ä–µ...")

if st.button("–ò —á—ë —É –Ω–∞—Å –≤ –∏—Ç–æ–≥–µ?"):
    if name.strip() == "" or (category in ["–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"] and artist.strip() == ""):
        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π!")
    else:
        score = flomaster_score(R, S, T, H, V)
        display_name = f"{artist} ‚Äî {name}" if artist else name
        st.success(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è {forms['who']} {display_name}: {score} / 90 üéØ")
        st.balloons()

        new_row = pd.DataFrame([{
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": artist if artist else "",
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
            "–ë–∞–ª–ª—ã": score,
            "–†–µ—Ü–µ–Ω–∑–∏—è": review.strip() if review else ""
        }])

        df = pd.concat([df, new_row], ignore_index=True)
        df.to_csv(CSV_FILE, index=False)

# -----------------------------
# –¢–∞–±–ª–∏—Ü–∞ (–ö–≤–∞—Å –ß–∞—Ä—Ç)
# -----------------------------
filtered = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == category]
if not filtered.empty:
    st.subheader(f"üèÜ –ö–≤–∞—Å –ß–∞—Ä—Ç: {forms['title']}")
    filtered = filtered.sort_values(by="–ë–∞–ª–ª—ã", ascending=False).reset_index(drop=True)
    filtered.index += 1

    for i, row in filtered.iterrows():
        artist_part = f" ‚Äî {row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']}" if row['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'] else ""
        st.markdown(f"**{i}. {row['–ù–∞–∑–≤–∞–Ω–∏–µ']}{artist_part}** ‚Äî {row['–ë–∞–ª–ª—ã']} / 90")
        if row["–†–µ—Ü–µ–Ω–∑–∏—è"] and str(row["–†–µ—Ü–µ–Ω–∑–∏—è"]).strip():
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é"):
                st.write(row["–†–µ—Ü–µ–Ω–∑–∏—è"])
else:
    st.info(f"üëÄ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {forms['title'].lower()}.")

# -----------------------------
# –°–±—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞
# -----------------------------
if st.button(f"–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ ({forms['title'].lower()})"):
    df = df[df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] != category]
    df.to_csv(CSV_FILE, index=False)
    st.success(f"–†–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {forms['title']} —Å–±—Ä–æ—à–µ–Ω.")

