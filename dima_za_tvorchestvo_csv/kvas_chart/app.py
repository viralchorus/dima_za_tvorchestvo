import streamlit as st
import pandas as pd
from datetime import datetime
import os

def flomaster_score(R, S, T, H, V):
    B = R + S + T + H
    B_prime = B * 1.4
    M = 1.0 + ((V - 1) / 9) * (1.6072 - 1.0)
    return round(B_prime * M)

st.set_page_config(page_title="–ö–≤–∞—Å –ß–∞—Ä—Ç", page_icon="üç∫")

def _create_empty_store():
    return {"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": [], "–¢—Ä–µ–∫": [], "–ê–ª—å–±–æ–º": []}

if "ratings" not in st.session_state:
    st.session_state["ratings"] = _create_empty_store()
elif isinstance(st.session_state["ratings"], list):
    st.session_state["ratings"] = _create_empty_store()

CSV_FILE = "ratings.csv"

if os.path.exists(CSV_FILE):
    old_df = pd.read_csv(CSV_FILE)
    for cat in ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"]:
        st.session_state["ratings"][cat] = old_df[old_df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] == cat].to_dict("records")

category_forms = {
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": {"who": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", "title": "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏"},
    "–¢—Ä–µ–∫": {"who": "—Ç—Ä–µ–∫–∞", "title": "–¢—Ä–µ–∫–∏"},
    "–ê–ª—å–±–æ–º": {"who": "–∞–ª—å–±–æ–º–∞", "title": "–ê–ª—å–±–æ–º—ã"},
}

st.title("üç∫ –ö–≤–∞—Å –ß–∞—Ä—Ç ‚Äî –î–∏–º–∞ –ó–∞ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ")
st.write("–û—Ü–µ–Ω–∏ –º—É–∑–ª–æ –∫–∞–∫ –î–º–∏—Ç—Ä–∏–π –ö—É–∑–Ω–µ—Ü–æ–≤. (–¢–æ–ª—å–∫–æ –Ω–µ –ø—Ä–æ–ª–µ–π –∫–≤–∞—Å –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω!)")

category = st.radio(
    "–ß—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è?",
    ["–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", "–¢—Ä–µ–∫", "–ê–ª—å–±–æ–º"],
    horizontal=True
)
forms = category_forms[category]

nickname = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")
if nickname.strip() == "":
    nickname = "–°–µ—Ä–∞—è –º—ã—à—å (–ù–µ –∑–∞—Ä–µ–≥–∞–Ω)"

name = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ {forms['who']}:")

R = st.slider("üé≠ –†–∏—Ñ–º—ã / –û–±—Ä–∞–∑—ã", 1, 10, 5)
S = st.slider("üéµ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ / –†–∏—Ç–º–∏–∫–∞", 1, 10, 5)
T = st.slider("üî• –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª—è", 1, 10, 5)
H = st.slider("üí´ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å / –•–∞—Ä–∏–∑–º–∞", 1, 10, 5)

st.markdown("### üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±")
st.markdown(
    """
    <div style='padding:8px; border:2px solid #6C63FF; border-radius:10px;
    background-color:#F3F0FF; color:#000000;'>
        <b>–ß–µ–º —Å–∏–ª—å–Ω–µ–µ –≤–∞–π–± ‚Äî —Ç–µ–º –≤–∫—É—Å–Ω–µ–µ –∫–≤–∞—Å. –≠—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π –≤–ª–∏—è–µ—Ç –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏, –±—Ä–æ!</b>
    </div>
    """ ,
    unsafe_allow_html=True
)
V = st.slider("üåå –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ / –í–∞–π–±", 1, 10, 5, key="vibe_slider")

review = st.text_area("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–Ω–∑–∏—é (–ø–æ –∂–µ–ª–∞–Ω–∏—é):", "")

if st.button("–ò —á—ë —É –Ω–∞—Å –≤ –∏—Ç–æ–≥–µ?"):
    if name.strip() == "":
        st.warning("‚ö†Ô∏è –¢—ã —á—ë, –ß—É–ø–∞? –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ü–µ–Ω–∫–æ–π, –Ω–µ –±—É–¥—å –º—ã—à—å—é!")
    else:
        score = flomaster_score(R, S, T, H, V)
        st.success(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è {forms['who']} {name}: {score} / 90 üéØ")
        st.balloons()

        entry = {
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name.strip(),
            "–ë–∞–ª–ª—ã": int(score),
            "–†–µ—Ü–µ–Ω–∑–∏—è": review.strip(),
            "–ù–∏–∫–Ω–µ–π–º": nickname.strip(),
            "–î–∞—Ç–∞": datetime.now().strftime("%d.%m.%Y"),
        }

        st.session_state["ratings"][category].append(entry)

        all_data = []
        for cat, items in st.session_state["ratings"].items():
            all_data.extend(items)
        pd.DataFrame(all_data).to_csv(CSV_FILE, index=False, encoding="utf-8-sig")

ratings_list = st.session_state["ratings"][category]

if ratings_list:
    st.subheader(f"üèÜ –ö–≤–∞—Å –ß–∞—Ä—Ç: {forms['title']}")
    df = pd.DataFrame(ratings_list)
    df = df.sort_values(by="–ë–∞–ª–ª—ã", ascending=False).reset_index(drop=True)
    df.index += 1
    st.dataframe(df[["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ë–∞–ª–ª—ã", "–ù–∏–∫–Ω–µ–π–º", "–î–∞—Ç–∞"]], use_container_width=True)
else:
    st.info(f"üëÄ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {forms['title'].lower()}.")

if st.button("üìú –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã"):
    all_reviews = [
        r for cat in st.session_state["ratings"].values()
        for r in cat if r["–†–µ—Ü–µ–Ω–∑–∏—è"].strip() != ""
    ]

    if all_reviews:
        st.subheader("üí¨ –†–µ—Ü–µ–Ω–∑–∏–∏ –æ—Ç –∫–≤–∞—Å–µ—Ä–æ–≤:")
        for r in sorted(all_reviews, key=lambda x: x["–î–∞—Ç–∞"], reverse=True):
            st.markdown(f"""
            **{r['–ù–∏–∫–Ω–µ–π–º']}** üïì *{r['–î–∞—Ç–∞']}*  
            **{r['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}:** {r['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî **{r['–ë–∞–ª–ª—ã']} / 90**  
            > {r['–†–µ—Ü–µ–Ω–∑–∏—è']}
            """)
            st.markdown("---")
    else:
        st.info("üç∫ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Å–∫–∞–∑–∞–ª—Å—è. –ë—É–¥—å –ø–µ—Ä–≤—ã–º, –±—Ä–æ!")

if st.button(f"‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ ({forms['title'].lower()})"):
    st.session_state["ratings"][category] = []
    all_data = []
    for cat, items in st.session_state["ratings"].items():
        all_data.extend(items)
    pd.DataFrame(all_data).to_csv(CSV_FILE, index=False, encoding="utf-8-sig")
    st.success(f"–†–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {forms['title']} —Å–±—Ä–æ—à–µ–Ω.")
